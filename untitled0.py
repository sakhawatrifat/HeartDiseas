# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oja8oU7U_hl4akyIE19nHk9X0YVeNfil
"""



"""Importing the Dependencies

"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score



"""Data Collection and Processing

"""

# loading the csv data to a Pandas DataFrame
heart_data = pd.read_csv('/content/heart.csv')

# print first 5 rows of the dataset
heart_data.head()

# print last 5 rows of the dataset
heart_data.tail()

# number of row and colums in the dataset

# number of row and colums in the dataset
heart_data.shape

# getting some info about the data
heart_data.info()

# Checking for missing vaslues
heart_data.isnull().sum()

# statistical measures about th data
heart_data.describe()

#checking the distribution of HeartDisease Variable
heart_data['HeartDisease'].value_counts()



"""1 --> Defcetive Heart

0 --> Healtly Heart

Slitting the features and Age
"""

X = heart_data.drop(columns = 'Age' , axis = 1)
Y = heart_data['Age']

print(X)

print(Y)

"""Splitting the Data into Training data & Test Data

"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify= Y, random_state=2)

print(X.shape, X_train.shape, X_train.shape)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify= Y, random_state=2)
print(X.shape, X_train.shape, X_train.shape)



"""Model Training

Logistric Regression
"""

model = LogisticRegression()

#training the LogistricRegreassion model with Training data
model.fit(X_train, Y_train)

"""Accuracy Score"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuuracy on Trawining data:', training_data_accuracy)

#accuracy on test data
X_train_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuuracy on Test data:', test_data_accuracy)

"""Building a Predictive System

"""

input_data = (40,M,ATA,140,289,0,Normal,172,N,0,Up,0)

# Change the input data to a numpy array
input_data_as_numpy_array = np.asanyarray(input_data)

#reshape the numpy as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
prit(prediction)

if(prediction[0] == 0):
 print('The Persone does not have a Heart Disease')
else:
   print('The Persone has Heart Disease')

